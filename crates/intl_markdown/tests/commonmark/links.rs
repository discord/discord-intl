#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let mut output = String::new();
        commonmark_html::format_document(&mut output, &ast)
            .expect("Failed to format the parsed input");
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_482() {
    let input = "[link](/uri \"title\")";
    let expected = "<p><a href=\"/uri\" title=\"title\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_483() {
    let input = "[link](/uri)";
    let expected = "<p><a href=\"/uri\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_484() {
    let input = "[](./target.md)";
    let expected = "<p><a href=\"./target.md\"></a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_485() {
    let input = "[link]()";
    let expected = "<p><a href=\"\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_486() {
    let input = "[link](<>)";
    let expected = "<p><a href=\"\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_487() {
    let input = "[]()";
    let expected = "<p><a href=\"\"></a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_488() {
    let input = "[link](/my uri)";
    let expected = "<p>[link](/my uri)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_489() {
    let input = "[link](</my uri>)";
    let expected = "<p><a href=\"/my%20uri\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_490() {
    let input = "[link](foo\nbar)";
    let expected = "<p>[link](foo\nbar)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_491() {
    let input = "[link](<foo\nbar>)";
    let expected = "<p>[link](<foo\nbar>)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_492() {
    let input = "[a](<b)c>)";
    let expected = "<p><a href=\"b)c\">a</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_493() {
    let input = "[link](<foo\\>)";
    let expected = "<p>[link](&lt;foo&gt;)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_494() {
    let input = "[a](<b)c\n[a](<b)c>\n[a](<b>c)";
    let expected = "<p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_495() {
    let input = "[link](\\(foo\\))";
    let expected = "<p><a href=\"(foo)\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_496() {
    let input = "[link](foo(and(bar)))";
    let expected = "<p><a href=\"foo(and(bar))\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_497() {
    let input = "[link](foo(and(bar))";
    let expected = "<p>[link](foo(and(bar))</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_498() {
    let input = "[link](foo\\(and\\(bar\\))";
    let expected = "<p><a href=\"foo(and(bar)\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_499() {
    let input = "[link](<foo(and(bar)>)";
    let expected = "<p><a href=\"foo(and(bar)\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_500() {
    let input = "[link](foo\\)\\:)";
    let expected = "<p><a href=\"foo):\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_501() {
    let input = "[link](#fragment)\n\n[link](https://example.com#fragment)\n\n[link](https://example.com?foo=3#frag)" ;
    let expected = "<p><a href=\"#fragment\">link</a></p>\n<p><a href=\"https://example.com#fragment\">link</a></p>\n<p><a href=\"https://example.com?foo=3#frag\">link</a></p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_502() {
    let input = "[link](foo\\bar)";
    let expected = "<p><a href=\"foo%5Cbar\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_503() {
    let input = "[link](foo%20b&auml;)";
    let expected = "<p><a href=\"foo%20b%C3%A4\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_504() {
    let input = "[link](\"title\")";
    let expected = "<p><a href=\"%22title%22\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_505() {
    let input = "[link](/url \"title\")\n[link](/url 'title')\n[link](/url (title))";
    let expected = "<p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_506() {
    let input = "[link](/url \"title \\\"&quot;\")";
    let expected = "<p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_507() {
    let input = "[link](/url\u{a0}\"title\")";
    let expected = "<p><a href=\"/url%C2%A0%22title%22\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_508() {
    let input = "[link](/url \"title \"and\" title\")";
    let expected = "<p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_509() {
    let input = "[link](/url 'title \"and\" title')";
    let expected = "<p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_510() {
    let input = "[link](   /uri\n  \"title\"  )";
    let expected = "<p><a href=\"/uri\" title=\"title\">link</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_511() {
    let input = "[link] (/uri)";
    let expected = "<p>[link] (/uri)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_512() {
    let input = "[link [foo [bar]]](/uri)";
    let expected = "<p><a href=\"/uri\">link [foo [bar]]</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_513() {
    let input = "[link] bar](/uri)";
    let expected = "<p>[link] bar](/uri)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_514() {
    let input = "[link [bar](/uri)";
    let expected = "<p>[link <a href=\"/uri\">bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_515() {
    let input = "[link \\[bar](/uri)";
    let expected = "<p><a href=\"/uri\">link [bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_516() {
    let input = "[link *foo **bar** `#`*](/uri)";
    let expected =
        "<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_517() {
    let input = "[![moon](moon.jpg)](/uri)";
    let expected = "<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_518() {
    let input = "[foo [bar](/uri)](/uri)";
    let expected = "<p>[foo <a href=\"/uri\">bar</a>](/uri)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_519() {
    let input = "[foo *[bar [baz](/uri)](/uri)*](/uri)";
    let expected = "<p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_520() {
    let input = "![[[foo](uri1)](uri2)](uri3)";
    let expected = "<p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_521() {
    let input = "*[foo*](/uri)";
    let expected = "<p>*<a href=\"/uri\">foo*</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_522() {
    let input = "[foo *bar](baz*)";
    let expected = "<p><a href=\"baz*\">foo *bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_523() {
    let input = "*foo [bar* baz]";
    let expected = "<p><em>foo [bar</em> baz]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_524() {
    let input = "[foo <bar attr=\"](baz)\">";
    let expected = "<p>[foo <bar attr=\"](baz)\"></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_525() {
    let input = "[foo`](/uri)`";
    let expected = "<p>[foo<code>](/uri)</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_526() {
    let input = "[foo<https://example.com/?search=](uri)>";
    let expected = "<p>[foo<a href=\"https://example.com/?search=%5D(uri)\">https://example.com/?search=](uri)</a></p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_527() {
    let input = "[foo][bar]\n\n[bar]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_528() {
    let input = "[link [foo [bar]]][ref]\n\n[ref]: /uri";
    let expected = "<p><a href=\"/uri\">link [foo [bar]]</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_529() {
    let input = "[link \\[bar][ref]\n\n[ref]: /uri";
    let expected = "<p><a href=\"/uri\">link [bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_530() {
    let input = "[link *foo **bar** `#`*][ref]\n\n[ref]: /uri";
    let expected =
        "<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_531() {
    let input = "[![moon](moon.jpg)][ref]\n\n[ref]: /uri";
    let expected = "<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_532() {
    let input = "[foo [bar](/uri)][ref]\n\n[ref]: /uri";
    let expected = "<p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_533() {
    let input = "[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri";
    let expected = "<p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_534() {
    let input = "*[foo*][ref]\n\n[ref]: /uri";
    let expected = "<p>*<a href=\"/uri\">foo*</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_535() {
    let input = "[foo *bar][ref]*\n\n[ref]: /uri";
    let expected = "<p><a href=\"/uri\">foo *bar</a>*</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_536() {
    let input = "[foo <bar attr=\"][ref]\">\n\n[ref]: /uri";
    let expected = "<p>[foo <bar attr=\"][ref]\"></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_537() {
    let input = "[foo`][ref]`\n\n[ref]: /uri";
    let expected = "<p>[foo<code>][ref]</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_538() {
    let input = "[foo<https://example.com/?search=][ref]>\n\n[ref]: /uri";
    let expected = "<p>[foo<a href=\"https://example.com/?search=%5D%5Bref%5D\">https://example.com/?search=][ref]</a></p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_539() {
    let input = "[foo][BaR]\n\n[bar]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_540() {
    let input = "[ẞ]\n\n[SS]: /url";
    let expected = "<p><a href=\"/url\">ẞ</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_541() {
    let input = "[Foo\n  bar]: /url\n\n[Baz][Foo bar]";
    let expected = "<p><a href=\"/url\">Baz</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_542() {
    let input = "[foo] [bar]\n\n[bar]: /url \"title\"";
    let expected = "<p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_543() {
    let input = "[foo]\n[bar]\n\n[bar]: /url \"title\"";
    let expected = "<p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_544() {
    let input = "[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]";
    let expected = "<p><a href=\"/url1\">bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_545() {
    let input = "[bar][foo\\!]\n\n[foo!]: /url";
    let expected = "<p>[bar][foo!]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_546() {
    let input = "[foo][ref[]\n\n[ref[]: /uri";
    let expected = "<p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_547() {
    let input = "[foo][ref[bar]]\n\n[ref[bar]]: /uri";
    let expected = "<p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_548() {
    let input = "[[[foo]]]\n\n[[[foo]]]: /url";
    let expected = "<p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_549() {
    let input = "[foo][ref\\[]\n\n[ref\\[]: /uri";
    let expected = "<p><a href=\"/uri\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_550() {
    let input = "[bar\\\\]: /uri\n\n[bar\\\\]";
    let expected = "<p><a href=\"/uri\">bar\\</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_551() {
    let input = "[]\n\n[]: /uri";
    let expected = "<p>[]</p>\n<p>[]: /uri</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_552() {
    let input = "[\n ]\n\n[\n ]: /uri";
    let expected = "<p>[\n]</p>\n<p>[\n]: /uri</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_553() {
    let input = "[foo][]\n\n[foo]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_554() {
    let input = "[*foo* bar][]\n\n[*foo* bar]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_555() {
    let input = "[Foo][]\n\n[foo]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\">Foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_556() {
    let input = "[foo] \n[]\n\n[foo]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_557() {
    let input = "[foo]\n\n[foo]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_558() {
    let input = "[*foo* bar]\n\n[*foo* bar]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_559() {
    let input = "[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"";
    let expected = "<p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_560() {
    let input = "[[bar [foo]\n\n[foo]: /url";
    let expected = "<p>[[bar <a href=\"/url\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_561() {
    let input = "[Foo]\n\n[foo]: /url \"title\"";
    let expected = "<p><a href=\"/url\" title=\"title\">Foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_562() {
    let input = "[foo] bar\n\n[foo]: /url";
    let expected = "<p><a href=\"/url\">foo</a> bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_563() {
    let input = "\\[foo]\n\n[foo]: /url \"title\"";
    let expected = "<p>[foo]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_564() {
    let input = "[foo*]: /url\n\n*[foo*]";
    let expected = "<p>*<a href=\"/url\">foo*</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_565() {
    let input = "[foo][bar]\n\n[foo]: /url1\n[bar]: /url2";
    let expected = "<p><a href=\"/url2\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_566() {
    let input = "[foo][]\n\n[foo]: /url1";
    let expected = "<p><a href=\"/url1\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_567() {
    let input = "[foo]()\n\n[foo]: /url1";
    let expected = "<p><a href=\"\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_568() {
    let input = "[foo](not a link)\n\n[foo]: /url1";
    let expected = "<p><a href=\"/url1\">foo</a>(not a link)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_569() {
    let input = "[foo][bar][baz]\n\n[baz]: /url";
    let expected = "<p>[foo]<a href=\"/url\">bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_570() {
    let input = "[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2";
    let expected = "<p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_571() {
    let input = "[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2";
    let expected = "<p>[foo]<a href=\"/url1\">bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        parser.parse();
        let ast = parser.finish().to_document();
        let mut buffer = String::new();
        commonmark_html::format_document(&mut buffer, &ast)
            .expect("Failed to format the parsed input");
        buffer
    }
}
#[ignore]
#[test]
fn example_119() {
    let input = "```\\n<\\n >\\n```";
    let expected = "<pre><code>&lt;\\n &gt;\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_120() {
    let input = "~~~\\n<\\n >\\n~~~";
    let expected = "<pre><code>&lt;\\n &gt;\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_121() {
    let input = "``\\nfoo\\n``";
    let expected = "<p><code>foo</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_122() {
    let input = "```\\naaa\\n~~~\\n```";
    let expected = "<pre><code>aaa\\n~~~\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_123() {
    let input = "~~~\\naaa\\n```\\n~~~";
    let expected = "<pre><code>aaa\\n```\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_124() {
    let input = "````\\naaa\\n```\\n``````";
    let expected = "<pre><code>aaa\\n```\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_125() {
    let input = "~~~~\\naaa\\n~~~\\n~~~~";
    let expected = "<pre><code>aaa\\n~~~\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_126() {
    let input = "```";
    let expected = "<pre><code></code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_127() {
    let input = "`````\\n\\n```\\naaa";
    let expected = "<pre><code>\\n```\\naaa\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_128() {
    let input = "> ```\\n> aaa\\n\\nbbb";
    let expected = "<blockquote>\\n<pre><code>aaa\\n</code></pre>\\n</blockquote>\\n<p>bbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_129() {
    let input = "```\\n\\n  \\n```";
    let expected = "<pre><code>\\n  \\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_130() {
    let input = "```\\n```";
    let expected = "<pre><code></code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_131() {
    let input = " ```\\n aaa\\naaa\\n```";
    let expected = "<pre><code>aaa\\naaa\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_132() {
    let input = "  ```\\naaa\\n  aaa\\naaa\\n  ```";
    let expected = "<pre><code>aaa\\naaa\\naaa\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_133() {
    let input = "   ```\\n   aaa\\n    aaa\\n  aaa\\n   ```";
    let expected = "<pre><code>aaa\\n aaa\\naaa\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_134() {
    let input = "    ```\\n    aaa\\n    ```";
    let expected = "<pre><code>```\\naaa\\n```\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_135() {
    let input = "```\\naaa\\n  ```";
    let expected = "<pre><code>aaa\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_136() {
    let input = "   ```\\naaa\\n  ```";
    let expected = "<pre><code>aaa\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_137() {
    let input = "```\\naaa\\n    ```";
    let expected = "<pre><code>aaa\\n    ```\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_138() {
    let input = "``` ```\\naaa";
    let expected = "<p><code> </code>\\naaa</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_139() {
    let input = "~~~~~~\\naaa\\n~~~ ~~";
    let expected = "<pre><code>aaa\\n~~~ ~~\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_140() {
    let input = "foo\\n```\\nbar\\n```\\nbaz";
    let expected = "<p>foo</p>\\n<pre><code>bar\\n</code></pre>\\n<p>baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_141() {
    let input = "foo\\n---\\n~~~\\nbar\\n~~~\\n# baz";
    let expected = "<h2>foo</h2>\\n<pre><code>bar\\n</code></pre>\\n<h1>baz</h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_142() {
    let input = "```ruby\\ndef foo(x)\\n  return 3\\nend\\n```";
    let expected =
        "<pre><code class=\\\"language-ruby\\\">def foo(x)\\n  return 3\\nend\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_143() {
    let input = "~~~~    ruby startline=3 $%@#$\\ndef foo(x)\\n  return 3\\nend\\n~~~~~~~";
    let expected =
        "<pre><code class=\\\"language-ruby\\\">def foo(x)\\n  return 3\\nend\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_144() {
    let input = "````;\\n````";
    let expected = "<pre><code class=\\\"language-;\\\"></code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_145() {
    let input = "``` aa ```\\nfoo";
    let expected = "<p><code>aa</code>\\nfoo</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_146() {
    let input = "~~~ aa ``` ~~~\\nfoo\\n~~~";
    let expected = "<pre><code class=\\\"language-aa\\\">foo\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_147() {
    let input = "```\\n``` aaa\\n```";
    let expected = "<pre><code>``` aaa\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let mut output = String::new();
        commonmark_html::format_document(&mut output, &ast)
            .expect("Failed to format the parsed input");
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[ignore]
#[test]
fn example_613() {
    let input = "<a><bab><c2c>";
    let expected = "<p><a><bab><c2c></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_614() {
    let input = "<a/><b2/>";
    let expected = "<p><a/><b2/></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_615() {
    let input = "<a  /><b2\ndata=\"foo\" >";
    let expected = "<p><a  /><b2\ndata=\"foo\" ></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_616() {
    let input = "<a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 />";
    let expected = "<p><a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_617() {
    let input = "Foo <responsive-image src=\"foo.jpg\" />";
    let expected = "<p>Foo <responsive-image src=\"foo.jpg\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_618() {
    let input = "<33> <__>";
    let expected = "<p>&lt;33&gt; &lt;__&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_619() {
    let input = "<a h*#ref=\"hi\">";
    let expected = "<p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_620() {
    let input = "<a href=\"hi'> <a href=hi'>";
    let expected = "<p>&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_621() {
    let input = "< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />";
    let expected = "<p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_622() {
    let input = "<a href='bar'title=title>";
    let expected = "<p>&lt;a href='bar'title=title&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_623() {
    let input = "</a></foo >";
    let expected = "<p></a></foo ></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_624() {
    let input = "</a href=\"foo\">";
    let expected = "<p>&lt;/a href=&quot;foo&quot;&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_625() {
    let input = "foo <!-- this is a --\ncomment - with hyphens -->";
    let expected = "<p>foo <!-- this is a --\ncomment - with hyphens --></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_626() {
    let input = "foo <!--> foo -->\n\nfoo <!---> foo -->";
    let expected = "<p>foo <!--> foo --&gt;</p>\n<p>foo <!---> foo --&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_627() {
    let input = "foo <?php echo $a; ?>";
    let expected = "<p>foo <?php echo $a; ?></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_628() {
    let input = "foo <!ELEMENT br EMPTY>";
    let expected = "<p>foo <!ELEMENT br EMPTY></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_629() {
    let input = "foo <![CDATA[>&<]]>";
    let expected = "<p>foo <![CDATA[>&<]]></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_630() {
    let input = "foo <a href=\"&ouml;\">";
    let expected = "<p>foo <a href=\"&ouml;\"></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_631() {
    let input = "foo <a href=\"\\*\">";
    let expected = "<p>foo <a href=\"\\*\"></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_632() {
    let input = "<a href=\"\\\"\">";
    let expected = "<p>&lt;a href=&quot;&quot;&quot;&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

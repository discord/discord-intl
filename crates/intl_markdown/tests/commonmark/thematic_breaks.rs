#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let mut output = String::new();
        commonmark_html::format_document(&mut output, &ast)
            .expect("Failed to format the parsed input");
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_43() {
    let input = "***\n---\n___";
    let expected = "<hr />\n<hr />\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_44() {
    let input = "+++";
    let expected = "<p>+++</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_45() {
    let input = "===";
    let expected = "<p>===</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_46() {
    let input = "--\n**\n__";
    let expected = "<p>--\n**\n__</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_47() {
    let input = " ***\n  ***\n   ***";
    let expected = "<hr />\n<hr />\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_48() {
    let input = "    ***";
    let expected = "<pre><code>***\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_49() {
    let input = "Foo\n    ***";
    let expected = "<p>Foo\n***</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_50() {
    let input = "_____________________________________";
    let expected = "<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_51() {
    let input = " - - -";
    let expected = "<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_52() {
    let input = " **  * ** * ** * **";
    let expected = "<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_53() {
    let input = "-     -      -      -";
    let expected = "<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_54() {
    let input = "- - - -    ";
    let expected = "<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_55() {
    let input = "_ _ _ _ a\n\na------\n\n---a---";
    let expected = "<p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_56() {
    let input = " *-*";
    let expected = "<p><em>-</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_57() {
    let input = "- foo\n***\n- bar";
    let expected = "<ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_58() {
    let input = "Foo\n***\nbar";
    let expected = "<p>Foo</p>\n<hr />\n<p>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_59() {
    let input = "Foo\n---\nbar";
    let expected = "<h2>Foo</h2>\n<p>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_60() {
    let input = "* Foo\n* * *\n* Bar";
    let expected = "<ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_61() {
    let input = "- Foo\n- * * *";
    let expected = "<ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

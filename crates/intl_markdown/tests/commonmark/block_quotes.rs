#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{formatter, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let output = formatter::to_html(&ast);
        println!("Input:\n------\n{}\n", input);
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[ignore]
#[test]
fn example_228() {
    let input = "> # Foo\n> bar\n> baz";
    let expected = "<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_229() {
    let input = "># Foo\n>bar\n> baz";
    let expected = "<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_230() {
    let input = "   > # Foo\n   > bar\n > baz";
    let expected = "<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_231() {
    let input = "    > # Foo\n    > bar\n    > baz";
    let expected = "<pre><code>&gt; # Foo\n&gt; bar\n&gt; baz\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_232() {
    let input = "> # Foo\n> bar\nbaz";
    let expected = "<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_233() {
    let input = "> bar\nbaz\n> foo";
    let expected = "<blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_234() {
    let input = "> foo\n---";
    let expected = "<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_235() {
    let input = "> - foo\n- bar";
    let expected =
        "<blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_236() {
    let input = ">     foo\n    bar";
    let expected =
        "<blockquote>\n<pre><code>foo\n</code></pre>\n</blockquote>\n<pre><code>bar\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_237() {
    let input = "> ```\nfoo\n```";
    let expected = "<blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_238() {
    let input = "> foo\n    - bar";
    let expected = "<blockquote>\n<p>foo\n- bar</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_239() {
    let input = ">";
    let expected = "<blockquote>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_240() {
    let input = ">\n>  \n> ";
    let expected = "<blockquote>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_241() {
    let input = ">\n> foo\n>  ";
    let expected = "<blockquote>\n<p>foo</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_242() {
    let input = "> foo\n\n> bar";
    let expected =
        "<blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_243() {
    let input = "> foo\n> bar";
    let expected = "<blockquote>\n<p>foo\nbar</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_244() {
    let input = "> foo\n>\n> bar";
    let expected = "<blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_245() {
    let input = "foo\n> bar";
    let expected = "<p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_246() {
    let input = "> aaa\n***\n> bbb";
    let expected =
        "<blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_247() {
    let input = "> bar\nbaz";
    let expected = "<blockquote>\n<p>bar\nbaz</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_248() {
    let input = "> bar\n\nbaz";
    let expected = "<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_249() {
    let input = "> bar\n>\nbaz";
    let expected = "<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_250() {
    let input = "> > > foo\nbar";
    let expected = "<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_251() {
    let input = ">>> foo\n> bar\n>>baz";
    let expected = "<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_252() {
    let input = ">     code\n\n>    not code";
    let expected = "<blockquote>\n<pre><code>code\n</code></pre>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

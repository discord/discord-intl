#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let mut output = String::new();
        commonmark_html::format_document(&mut output, &ast)
            .expect("Failed to format the parsed input");
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_80() {
    let input = "Foo *bar*\n=========\n\nFoo *bar*\n---------";
    let expected = "<h1>Foo <em>bar</em></h1>\n<h2>Foo <em>bar</em></h2>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_81() {
    let input = "Foo *bar\nbaz*\n====";
    let expected = "<h1>Foo <em>bar\nbaz</em></h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_82() {
    let input = "  Foo *bar\nbaz*\t\n====";
    let expected = "<h1>Foo <em>bar\nbaz</em></h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_83() {
    let input = "Foo\n-------------------------\n\nFoo\n=";
    let expected = "<h2>Foo</h2>\n<h1>Foo</h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_84() {
    let input = "   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===";
    let expected = "<h2>Foo</h2>\n<h2>Foo</h2>\n<h1>Foo</h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_85() {
    let input = "    Foo\n    ---\n\n    Foo\n---";
    let expected = "<pre><code>Foo\n---\n\nFoo\n</code></pre>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_86() {
    let input = "Foo\n   ----      ";
    let expected = "<h2>Foo</h2>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_87() {
    let input = "Foo\n    ---";
    let expected = "<p>Foo\n---</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_88() {
    let input = "Foo\n= =\n\nFoo\n--- -";
    let expected = "<p>Foo\n= =</p>\n<p>Foo</p>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_89() {
    let input = "Foo  \n-----";
    let expected = "<h2>Foo</h2>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_90() {
    let input = "Foo\\\n----";
    let expected = "<h2>Foo\\</h2>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_91() {
    let input = "`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>";
    let expected =
        "<h2>`Foo</h2>\n<p>`</p>\n<h2>&lt;a title=&quot;a lot</h2>\n<p>of dashes&quot;/&gt;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_92() {
    let input = "> Foo\n---";
    let expected = "<blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_93() {
    let input = "> foo\nbar\n===";
    let expected = "<blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_94() {
    let input = "- Foo\n---";
    let expected = "<ul>\n<li>Foo</li>\n</ul>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_95() {
    let input = "Foo\nBar\n---";
    let expected = "<h2>Foo\nBar</h2>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_96() {
    let input = "---\nFoo\n---\nBar\n---\nBaz";
    let expected = "<hr />\n<h2>Foo</h2>\n<h2>Bar</h2>\n<p>Baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_97() {
    let input = "\n====";
    let expected = "<p>====</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_98() {
    let input = "---\n---";
    let expected = "<hr />\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_99() {
    let input = "- foo\n-----";
    let expected = "<ul>\n<li>foo</li>\n</ul>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_100() {
    let input = "    foo\n---";
    let expected = "<pre><code>foo\n</code></pre>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_101() {
    let input = "> foo\n-----";
    let expected = "<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_102() {
    let input = "\\> foo\n------";
    let expected = "<h2>&gt; foo</h2>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_103() {
    let input = "Foo\n\nbar\n---\nbaz";
    let expected = "<p>Foo</p>\n<h2>bar</h2>\n<p>baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_104() {
    let input = "Foo\nbar\n\n---\n\nbaz";
    let expected = "<p>Foo\nbar</p>\n<hr />\n<p>baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_105() {
    let input = "Foo\nbar\n* * *\nbaz";
    let expected = "<p>Foo\nbar</p>\n<hr />\n<p>baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_106() {
    let input = "Foo\nbar\n\\---\nbaz";
    let expected = "<p>Foo\nbar\n---\nbaz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

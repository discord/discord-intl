#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{formatter, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let output = formatter::to_html(&ast);
        println!("Input:\n------\n{}\n", input);
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_572() {
    let input = "![foo](/url \"title\")";
    let expected = "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_573() {
    let input = "![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"";
    let expected = "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_574() {
    let input = "![foo ![bar](/url)](/url2)";
    let expected = "<p><img src=\"/url2\" alt=\"foo bar\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_575() {
    let input = "![foo [bar](/url)](/url2)";
    let expected = "<p><img src=\"/url2\" alt=\"foo bar\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_576() {
    let input = "![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"";
    let expected = "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_577() {
    let input = "![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"";
    let expected = "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_578() {
    let input = "![foo](train.jpg)";
    let expected = "<p><img src=\"train.jpg\" alt=\"foo\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_579() {
    let input = "My ![foo bar](/path/to/train.jpg  \"title\"   )";
    let expected = "<p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_580() {
    let input = "![foo](<url>)";
    let expected = "<p><img src=\"url\" alt=\"foo\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_581() {
    let input = "![](/url)";
    let expected = "<p><img src=\"/url\" alt=\"\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_582() {
    let input = "![foo][bar]\n\n[bar]: /url";
    let expected = "<p><img src=\"/url\" alt=\"foo\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_583() {
    let input = "![foo][bar]\n\n[BAR]: /url";
    let expected = "<p><img src=\"/url\" alt=\"foo\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_584() {
    let input = "![foo][]\n\n[foo]: /url \"title\"";
    let expected = "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_585() {
    let input = "![*foo* bar][]\n\n[*foo* bar]: /url \"title\"";
    let expected = "<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_586() {
    let input = "![Foo][]\n\n[foo]: /url \"title\"";
    let expected = "<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_587() {
    let input = "![foo] \n[]\n\n[foo]: /url \"title\"";
    let expected = "<p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_588() {
    let input = "![foo]\n\n[foo]: /url \"title\"";
    let expected = "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_589() {
    let input = "![*foo* bar]\n\n[*foo* bar]: /url \"title\"";
    let expected = "<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_590() {
    let input = "![[foo]]\n\n[[foo]]: /url \"title\"";
    let expected = "<p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_591() {
    let input = "![Foo]\n\n[foo]: /url \"title\"";
    let expected = "<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_592() {
    let input = "!\\[foo]\n\n[foo]: /url \"title\"";
    let expected = "<p>![foo]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_593() {
    let input = "\\![foo]\n\n[foo]: /url \"title\"";
    let expected = "<p>!<a href=\"/url\" title=\"title\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

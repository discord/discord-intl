#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let mut output = String::new();
        commonmark_html::format_document(&mut output, &ast)
            .expect("Failed to format the parsed input");
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_350() {
    let input = "*foo bar*";
    let expected = "<p><em>foo bar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_351() {
    let input = "a * foo bar*";
    let expected = "<p>a * foo bar*</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_352() {
    let input = "a*\"foo\"*";
    let expected = "<p>a*&quot;foo&quot;*</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_353() {
    let input = "*\u{a0}a\u{a0}*";
    let expected = "<p>*\u{a0}a\u{a0}*</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_354() {
    let input = "*$*alpha.\n\n*£*bravo.\n\n*€*charlie.";
    let expected = "<p>*$*alpha.</p>\n<p>*£*bravo.</p>\n<p>*€*charlie.</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_355() {
    let input = "foo*bar*";
    let expected = "<p>foo<em>bar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_356() {
    let input = "5*6*78";
    let expected = "<p>5<em>6</em>78</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_357() {
    let input = "_foo bar_";
    let expected = "<p><em>foo bar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_358() {
    let input = "_ foo bar_";
    let expected = "<p>_ foo bar_</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_359() {
    let input = "a_\"foo\"_";
    let expected = "<p>a_&quot;foo&quot;_</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_360() {
    let input = "foo_bar_";
    let expected = "<p>foo_bar_</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_361() {
    let input = "5_6_78";
    let expected = "<p>5_6_78</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_362() {
    let input = "пристаням_стремятся_";
    let expected = "<p>пристаням_стремятся_</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_363() {
    let input = "aa_\"bb\"_cc";
    let expected = "<p>aa_&quot;bb&quot;_cc</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_364() {
    let input = "foo-_(bar)_";
    let expected = "<p>foo-<em>(bar)</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_365() {
    let input = "_foo*";
    let expected = "<p>_foo*</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_366() {
    let input = "*foo bar *";
    let expected = "<p>*foo bar *</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_367() {
    let input = "*foo bar\n*";
    let expected = "<p>*foo bar\n*</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_368() {
    let input = "*(*foo)";
    let expected = "<p>*(*foo)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_369() {
    let input = "*(*foo*)*";
    let expected = "<p><em>(<em>foo</em>)</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_370() {
    let input = "*foo*bar";
    let expected = "<p><em>foo</em>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_371() {
    let input = "_foo bar _";
    let expected = "<p>_foo bar _</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_372() {
    let input = "_(_foo)";
    let expected = "<p>_(_foo)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_373() {
    let input = "_(_foo_)_";
    let expected = "<p><em>(<em>foo</em>)</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_374() {
    let input = "_foo_bar";
    let expected = "<p>_foo_bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_375() {
    let input = "_пристаням_стремятся";
    let expected = "<p>_пристаням_стремятся</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_376() {
    let input = "_foo_bar_baz_";
    let expected = "<p><em>foo_bar_baz</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_377() {
    let input = "_(bar)_.";
    let expected = "<p><em>(bar)</em>.</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_378() {
    let input = "**foo bar**";
    let expected = "<p><strong>foo bar</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_379() {
    let input = "** foo bar**";
    let expected = "<p>** foo bar**</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_380() {
    let input = "a**\"foo\"**";
    let expected = "<p>a**&quot;foo&quot;**</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_381() {
    let input = "foo**bar**";
    let expected = "<p>foo<strong>bar</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_382() {
    let input = "__foo bar__";
    let expected = "<p><strong>foo bar</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_383() {
    let input = "__ foo bar__";
    let expected = "<p>__ foo bar__</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_384() {
    let input = "__\nfoo bar__";
    let expected = "<p>__\nfoo bar__</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_385() {
    let input = "a__\"foo\"__";
    let expected = "<p>a__&quot;foo&quot;__</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_386() {
    let input = "foo__bar__";
    let expected = "<p>foo__bar__</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_387() {
    let input = "5__6__78";
    let expected = "<p>5__6__78</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_388() {
    let input = "пристаням__стремятся__";
    let expected = "<p>пристаням__стремятся__</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_389() {
    let input = "__foo, __bar__, baz__";
    let expected = "<p><strong>foo, <strong>bar</strong>, baz</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_390() {
    let input = "foo-__(bar)__";
    let expected = "<p>foo-<strong>(bar)</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_391() {
    let input = "**foo bar **";
    let expected = "<p>**foo bar **</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_392() {
    let input = "**(**foo)";
    let expected = "<p>**(**foo)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_393() {
    let input = "*(**foo**)*";
    let expected = "<p><em>(<strong>foo</strong>)</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_394() {
    let input = "**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**";
    let expected = "<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_395() {
    let input = "**foo \"*bar*\" foo**";
    let expected = "<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_396() {
    let input = "**foo**bar";
    let expected = "<p><strong>foo</strong>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_397() {
    let input = "__foo bar __";
    let expected = "<p>__foo bar __</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_398() {
    let input = "__(__foo)";
    let expected = "<p>__(__foo)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_399() {
    let input = "_(__foo__)_";
    let expected = "<p><em>(<strong>foo</strong>)</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_400() {
    let input = "__foo__bar";
    let expected = "<p>__foo__bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_401() {
    let input = "__пристаням__стремятся";
    let expected = "<p>__пристаням__стремятся</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_402() {
    let input = "__foo__bar__baz__";
    let expected = "<p><strong>foo__bar__baz</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_403() {
    let input = "__(bar)__.";
    let expected = "<p><strong>(bar)</strong>.</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_404() {
    let input = "*foo [bar](/url)*";
    let expected = "<p><em>foo <a href=\"/url\">bar</a></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_405() {
    let input = "*foo\nbar*";
    let expected = "<p><em>foo\nbar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_406() {
    let input = "_foo __bar__ baz_";
    let expected = "<p><em>foo <strong>bar</strong> baz</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_407() {
    let input = "_foo _bar_ baz_";
    let expected = "<p><em>foo <em>bar</em> baz</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_408() {
    let input = "__foo_ bar_";
    let expected = "<p><em><em>foo</em> bar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_409() {
    let input = "*foo *bar**";
    let expected = "<p><em>foo <em>bar</em></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_410() {
    let input = "*foo **bar** baz*";
    let expected = "<p><em>foo <strong>bar</strong> baz</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_411() {
    let input = "*foo**bar**baz*";
    let expected = "<p><em>foo<strong>bar</strong>baz</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_412() {
    let input = "*foo**bar*";
    let expected = "<p><em>foo**bar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_413() {
    let input = "***foo** bar*";
    let expected = "<p><em><strong>foo</strong> bar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_414() {
    let input = "*foo **bar***";
    let expected = "<p><em>foo <strong>bar</strong></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_415() {
    let input = "*foo**bar***";
    let expected = "<p><em>foo<strong>bar</strong></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_416() {
    let input = "foo***bar***baz";
    let expected = "<p>foo<em><strong>bar</strong></em>baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_417() {
    let input = "foo******bar*********baz";
    let expected = "<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_418() {
    let input = "*foo **bar *baz* bim** bop*";
    let expected = "<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_419() {
    let input = "*foo [*bar*](/url)*";
    let expected = "<p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_420() {
    let input = "** is not an empty emphasis";
    let expected = "<p>** is not an empty emphasis</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_421() {
    let input = "**** is not an empty strong emphasis";
    let expected = "<p>**** is not an empty strong emphasis</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_422() {
    let input = "**foo [bar](/url)**";
    let expected = "<p><strong>foo <a href=\"/url\">bar</a></strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_423() {
    let input = "**foo\nbar**";
    let expected = "<p><strong>foo\nbar</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_424() {
    let input = "__foo _bar_ baz__";
    let expected = "<p><strong>foo <em>bar</em> baz</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_425() {
    let input = "__foo __bar__ baz__";
    let expected = "<p><strong>foo <strong>bar</strong> baz</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_426() {
    let input = "____foo__ bar__";
    let expected = "<p><strong><strong>foo</strong> bar</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_427() {
    let input = "**foo **bar****";
    let expected = "<p><strong>foo <strong>bar</strong></strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_428() {
    let input = "**foo *bar* baz**";
    let expected = "<p><strong>foo <em>bar</em> baz</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_429() {
    let input = "**foo*bar*baz**";
    let expected = "<p><strong>foo<em>bar</em>baz</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_430() {
    let input = "***foo* bar**";
    let expected = "<p><strong><em>foo</em> bar</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_431() {
    let input = "**foo *bar***";
    let expected = "<p><strong>foo <em>bar</em></strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_432() {
    let input = "**foo *bar **baz**\nbim* bop**";
    let expected = "<p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_433() {
    let input = "**foo [*bar*](/url)**";
    let expected = "<p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_434() {
    let input = "__ is not an empty emphasis";
    let expected = "<p>__ is not an empty emphasis</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_435() {
    let input = "____ is not an empty strong emphasis";
    let expected = "<p>____ is not an empty strong emphasis</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_436() {
    let input = "foo ***";
    let expected = "<p>foo ***</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_437() {
    let input = "foo *\\**";
    let expected = "<p>foo <em>*</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_438() {
    let input = "foo *_*";
    let expected = "<p>foo <em>_</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_439() {
    let input = "foo *****";
    let expected = "<p>foo *****</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_440() {
    let input = "foo **\\***";
    let expected = "<p>foo <strong>*</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_441() {
    let input = "foo **_**";
    let expected = "<p>foo <strong>_</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_442() {
    let input = "**foo*";
    let expected = "<p>*<em>foo</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_443() {
    let input = "*foo**";
    let expected = "<p><em>foo</em>*</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_444() {
    let input = "***foo**";
    let expected = "<p>*<strong>foo</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_445() {
    let input = "****foo*";
    let expected = "<p>***<em>foo</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_446() {
    let input = "**foo***";
    let expected = "<p><strong>foo</strong>*</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_447() {
    let input = "*foo****";
    let expected = "<p><em>foo</em>***</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_448() {
    let input = "foo ___";
    let expected = "<p>foo ___</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_449() {
    let input = "foo _\\__";
    let expected = "<p>foo <em>_</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_450() {
    let input = "foo _*_";
    let expected = "<p>foo <em>*</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_451() {
    let input = "foo _____";
    let expected = "<p>foo _____</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_452() {
    let input = "foo __\\___";
    let expected = "<p>foo <strong>_</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_453() {
    let input = "foo __*__";
    let expected = "<p>foo <strong>*</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_454() {
    let input = "__foo_";
    let expected = "<p>_<em>foo</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_455() {
    let input = "_foo__";
    let expected = "<p><em>foo</em>_</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_456() {
    let input = "___foo__";
    let expected = "<p>_<strong>foo</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_457() {
    let input = "____foo_";
    let expected = "<p>___<em>foo</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_458() {
    let input = "__foo___";
    let expected = "<p><strong>foo</strong>_</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_459() {
    let input = "_foo____";
    let expected = "<p><em>foo</em>___</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_460() {
    let input = "**foo**";
    let expected = "<p><strong>foo</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_461() {
    let input = "*_foo_*";
    let expected = "<p><em><em>foo</em></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_462() {
    let input = "__foo__";
    let expected = "<p><strong>foo</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_463() {
    let input = "_*foo*_";
    let expected = "<p><em><em>foo</em></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_464() {
    let input = "****foo****";
    let expected = "<p><strong><strong>foo</strong></strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_465() {
    let input = "____foo____";
    let expected = "<p><strong><strong>foo</strong></strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_466() {
    let input = "******foo******";
    let expected = "<p><strong><strong><strong>foo</strong></strong></strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_467() {
    let input = "***foo***";
    let expected = "<p><em><strong>foo</strong></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_468() {
    let input = "_____foo_____";
    let expected = "<p><em><strong><strong>foo</strong></strong></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_469() {
    let input = "*foo _bar* baz_";
    let expected = "<p><em>foo _bar</em> baz_</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_470() {
    let input = "*foo __bar *baz bim__ bam*";
    let expected = "<p><em>foo <strong>bar *baz bim</strong> bam</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_471() {
    let input = "**foo **bar baz**";
    let expected = "<p>**foo <strong>bar baz</strong></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_472() {
    let input = "*foo *bar baz*";
    let expected = "<p>*foo <em>bar baz</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_473() {
    let input = "*[bar*](/url)";
    let expected = "<p>*<a href=\"/url\">bar*</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_474() {
    let input = "_foo [bar_](/url)";
    let expected = "<p>_foo <a href=\"/url\">bar_</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_475() {
    let input = "*<img src=\"foo\" title=\"*\"/>";
    let expected = "<p>*<img src=\"foo\" title=\"*\"/></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_476() {
    let input = "**<a href=\"**\">";
    let expected = "<p>**<a href=\"**\"></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_477() {
    let input = "__<a href=\"__\">";
    let expected = "<p>__<a href=\"__\"></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_478() {
    let input = "*a `*`*";
    let expected = "<p><em>a <code>*</code></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_479() {
    let input = "_a `_`_";
    let expected = "<p><em>a <code>_</code></em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_480() {
    let input = "**a<https://foo.bar/?q=**>";
    let expected = "<p>**a<a href=\"https://foo.bar/?q=**\">https://foo.bar/?q=**</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_481() {
    let input = "__a<https://foo.bar/?q=__>";
    let expected = "<p>__a<a href=\"https://foo.bar/?q=__\">https://foo.bar/?q=__</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

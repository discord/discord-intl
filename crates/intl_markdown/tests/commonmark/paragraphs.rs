#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        parser.parse();
        let ast = parser.finish().to_document();
        let mut buffer = String::new();
        commonmark_html::format_document(&mut buffer, &ast)
            .expect("Failed to format the parsed input");
        buffer
    }
}
#[test]
fn example_219() {
    let input = "aaa\\n\\nbbb";
    let expected = "<p>aaa</p>\\n<p>bbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_220() {
    let input = "aaa\\nbbb\\n\\nccc\\nddd";
    let expected = "<p>aaa\\nbbb</p>\\n<p>ccc\\nddd</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_221() {
    let input = "aaa\\n\\n\\nbbb";
    let expected = "<p>aaa</p>\\n<p>bbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_222() {
    let input = "  aaa\\n bbb";
    let expected = "<p>aaa\\nbbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_223() {
    let input = "aaa\\n             bbb\\n                                       ccc";
    let expected = "<p>aaa\\nbbb\\nccc</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_224() {
    let input = "   aaa\\nbbb";
    let expected = "<p>aaa\\nbbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_225() {
    let input = "    aaa\\nbbb";
    let expected = "<pre><code>aaa\\n</code></pre>\\n<p>bbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_226() {
    let input = "aaa     \\nbbb     ";
    let expected = "<p>aaa<br />\\nbbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let mut output = String::new();
        commonmark_html::format_document(&mut output, &ast)
            .expect("Failed to format the parsed input");
        println!("Input:\n------\n{}\n", input);
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_219() {
    let input = "aaa\n\nbbb";
    let expected = "<p>aaa</p>\n<p>bbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_220() {
    let input = "aaa\nbbb\n\nccc\nddd";
    let expected = "<p>aaa\nbbb</p>\n<p>ccc\nddd</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_221() {
    let input = "aaa\n\n\nbbb";
    let expected = "<p>aaa</p>\n<p>bbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_222() {
    let input = "  aaa\n bbb";
    let expected = "<p>aaa\nbbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_223() {
    let input = "aaa\n             bbb\n                                       ccc";
    let expected = "<p>aaa\nbbb\nccc</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_224() {
    let input = "   aaa\nbbb";
    let expected = "<p>aaa\nbbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_225() {
    let input = "    aaa\nbbb";
    let expected = "<pre><code>aaa\n</code></pre>\n<p>bbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_226() {
    let input = "aaa     \nbbb     ";
    let expected = "<p>aaa<br />\nbbb</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

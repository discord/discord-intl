#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let mut output = String::new();
        commonmark_html::format_document(&mut output, &ast)
            .expect("Failed to format the parsed input");
        println!("Input:\n------\n{}\n", input);
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_328() {
    let input = "`foo`";
    let expected = "<p><code>foo</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_329() {
    let input = "`` foo ` bar ``";
    let expected = "<p><code>foo ` bar</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_330() {
    let input = "` `` `";
    let expected = "<p><code>``</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_331() {
    let input = "`  ``  `";
    let expected = "<p><code> `` </code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_332() {
    let input = "` a`";
    let expected = "<p><code> a</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_333() {
    let input = "`\u{a0}b\u{a0}`";
    let expected = "<p><code>\u{a0}b\u{a0}</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_334() {
    let input = "`\u{a0}`\n`  `";
    let expected = "<p><code>\u{a0}</code>\n<code>  </code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_335() {
    let input = "``\nfoo\nbar  \nbaz\n``";
    let expected = "<p><code>foo bar   baz</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_336() {
    let input = "``\nfoo \n``";
    let expected = "<p><code>foo </code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_337() {
    let input = "`foo   bar \nbaz`";
    let expected = "<p><code>foo   bar  baz</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_338() {
    let input = "`foo\\`bar`";
    let expected = "<p><code>foo\\</code>bar`</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_339() {
    let input = "``foo`bar``";
    let expected = "<p><code>foo`bar</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_340() {
    let input = "` foo `` bar `";
    let expected = "<p><code>foo `` bar</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_341() {
    let input = "*foo`*`";
    let expected = "<p>*foo<code>*</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_342() {
    let input = "[not a `link](/foo`)";
    let expected = "<p>[not a <code>link](/foo</code>)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_343() {
    let input = "`<a href=\"`\">`";
    let expected = "<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_344() {
    let input = "<a href=\"`\">`";
    let expected = "<p><a href=\"`\">`</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_345() {
    let input = "`<https://foo.bar.`baz>`";
    let expected = "<p><code>&lt;https://foo.bar.</code>baz&gt;`</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_346() {
    let input = "<https://foo.bar.`baz>`";
    let expected = "<p><a href=\"https://foo.bar.%60baz\">https://foo.bar.`baz</a>`</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_347() {
    let input = "```foo``";
    let expected = "<p>```foo``</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_348() {
    let input = "`foo";
    let expected = "<p>`foo</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_349() {
    let input = "`foo``bar``";
    let expected = "<p>`foo<code>bar</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

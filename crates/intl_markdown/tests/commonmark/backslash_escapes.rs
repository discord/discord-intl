#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        parser.parse();
        let ast = parser.finish().to_document();
        let mut buffer = String::new();
        commonmark_html::format_document(&mut buffer, &ast)
            .expect("Failed to format the parsed input");
        buffer
    }
}
#[ignore]
#[test]
fn example_12() {
    let input = "\\\\!\\\\\\\"\\\\#\\\\$\\\\%\\\\&\\\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.\\\\/\\\\:\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\[\\\\\\\\\\\\]\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~" ;
    let expected = "<p>!&quot;#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_13() {
    let input = "\\\\\\t\\\\A\\\\a\\\\ \\\\3\\\\\\u{3c6}\\\\\\u{ab}";
    let expected = "<p>\\\\\\t\\\\A\\\\a\\\\ \\\\3\\\\\\u{3c6}\\\\\\u{ab}</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_14() {
    let input = "\\\\*not emphasized*\\n\\\\<br/> not a tag\\n\\\\[not a link](/foo)\\n\\\\`not code`\\n1\\\\. not a list\\n\\\\* not a list\\n\\\\# not a heading\\n\\\\[foo]: /url \\\"not a reference\\\"\\n\\\\&ouml; not a character entity" ;
    let expected = "<p>*not emphasized*\\n&lt;br/&gt; not a tag\\n[not a link](/foo)\\n`not code`\\n1. not a list\\n* not a list\\n# not a heading\\n[foo]: /url &quot;not a reference&quot;\\n&amp;ouml; not a character entity</p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_15() {
    let input = "\\\\\\\\*emphasis*";
    let expected = "<p>\\\\<em>emphasis</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_16() {
    let input = "foo\\\\\\nbar";
    let expected = "<p>foo<br />\\nbar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_17() {
    let input = "`` \\\\[\\\\` ``";
    let expected = "<p><code>\\\\[\\\\`</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_18() {
    let input = "    \\\\[\\\\]";
    let expected = "<pre><code>\\\\[\\\\]\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_19() {
    let input = "~~~\\n\\\\[\\\\]\\n~~~";
    let expected = "<pre><code>\\\\[\\\\]\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_20() {
    let input = "<https://example.com?find=\\\\*>";
    let expected =
        "<p><a href=\\\"https://example.com?find=%5C*\\\">https://example.com?find=\\\\*</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_21() {
    let input = "<a href=\\\"/bar\\\\/)\\\">";
    let expected = "<a href=\\\"/bar\\\\/)\\\">";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_22() {
    let input = "[foo](/bar\\\\* \\\"ti\\\\*tle\\\")";
    let expected = "<p><a href=\\\"/bar*\\\" title=\\\"ti*tle\\\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_23() {
    let input = "[foo]\\n\\n[foo]: /bar\\\\* \\\"ti\\\\*tle\\\"";
    let expected = "<p><a href=\\\"/bar*\\\" title=\\\"ti*tle\\\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_24() {
    let input = "``` foo\\\\+bar\\nfoo\\n```";
    let expected = "<pre><code class=\\\"language-foo+bar\\\">foo\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

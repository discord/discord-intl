#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let mut output = String::new();
        commonmark_html::format_document(&mut output, &ast)
            .expect("Failed to format the parsed input");
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_633() {
    let input = "foo  \nbaz";
    let expected = "<p>foo<br />\nbaz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_634() {
    let input = "foo\\\nbaz";
    let expected = "<p>foo<br />\nbaz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_635() {
    let input = "foo       \nbaz";
    let expected = "<p>foo<br />\nbaz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_636() {
    let input = "foo  \n     bar";
    let expected = "<p>foo<br />\nbar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_637() {
    let input = "foo\\\n     bar";
    let expected = "<p>foo<br />\nbar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_638() {
    let input = "*foo  \nbar*";
    let expected = "<p><em>foo<br />\nbar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_639() {
    let input = "*foo\\\nbar*";
    let expected = "<p><em>foo<br />\nbar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_640() {
    let input = "`code  \nspan`";
    let expected = "<p><code>code   span</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_641() {
    let input = "`code\\\nspan`";
    let expected = "<p><code>code\\ span</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_642() {
    let input = "<a href=\"foo  \nbar\">";
    let expected = "<p><a href=\"foo  \nbar\"></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_643() {
    let input = "<a href=\"foo\\\nbar\">";
    let expected = "<p><a href=\"foo\\\nbar\"></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_644() {
    let input = "foo\\";
    let expected = "<p>foo\\</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_645() {
    let input = "foo  ";
    let expected = "<p>foo</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_646() {
    let input = "### foo\\";
    let expected = "<h3>foo\\</h3>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_647() {
    let input = "### foo  ";
    let expected = "<h3>foo</h3>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

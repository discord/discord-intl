#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        parser.parse();
        let ast = parser.finish().to_document();
        let mut buffer = String::new();
        commonmark_html::format_document(&mut buffer, &ast)
            .expect("Failed to format the parsed input");
        buffer
    }
}
#[test]
fn example_25() {
    let input = "&nbsp; &amp; &copy; &AElig; &Dcaron;\\n&frac34; &HilbertSpace; &DifferentialD;\\n&ClockwiseContourIntegral; &ngE;" ;
    let expected = "<p>\\u{a0} &amp; \\u{a9} \\u{c6} \\u{10e}\\n\\u{be} \\u{210b} \\u{2146}\\n\\u{2232} \\u{2267}\\u{338}</p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_26() {
    let input = "&#35; &#1234; &#992; &#0;";
    let expected = "<p># \\u{4d2} \\u{3e0} \\u{fffd}</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_27() {
    let input = "&#X22; &#XD06; &#xcab;";
    let expected = "<p>&quot; \\u{d06} \\u{cab}</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_28() {
    let input = "&nbsp &x; &#; &#x;\\n&#87654321;\\n&#abcdef0;\\n&ThisIsNotDefined; &hi?;";
    let expected = "<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\\n&amp;#87654321;\\n&amp;#abcdef0;\\n&amp;ThisIsNotDefined; &amp;hi?;</p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_29() {
    let input = "&copy";
    let expected = "<p>&amp;copy</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_30() {
    let input = "&MadeUpEntity;";
    let expected = "<p>&amp;MadeUpEntity;</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_31() {
    let input = "<a href=\\\"&ouml;&ouml;.html\\\">";
    let expected = "<a href=\\\"&ouml;&ouml;.html\\\">";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_32() {
    let input = "[foo](/f&ouml;&ouml; \\\"f&ouml;&ouml;\\\")";
    let expected = "<p><a href=\\\"/f%C3%B6%C3%B6\\\" title=\\\"f\\u{f6}\\u{f6}\\\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_33() {
    let input = "[foo]\\n\\n[foo]: /f&ouml;&ouml; \\\"f&ouml;&ouml;\\\"";
    let expected = "<p><a href=\\\"/f%C3%B6%C3%B6\\\" title=\\\"f\\u{f6}\\u{f6}\\\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_34() {
    let input = "``` f&ouml;&ouml;\\nfoo\\n```";
    let expected = "<pre><code class=\\\"language-f\\u{f6}\\u{f6}\\\">foo\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_35() {
    let input = "`f&ouml;&ouml;`";
    let expected = "<p><code>f&amp;ouml;&amp;ouml;</code></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_36() {
    let input = "    f&ouml;f&ouml;";
    let expected = "<pre><code>f&amp;ouml;f&amp;ouml;\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_37() {
    let input = "&#42;foo&#42;\\n*foo*";
    let expected = "<p>*foo*\\n<em>foo</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_38() {
    let input = "&#42; foo\\n\\n* foo";
    let expected = "<p>* foo</p>\\n<ul>\\n<li>foo</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_39() {
    let input = "foo&#10;&#10;bar";
    let expected = "<p>foo\\n\\nbar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_40() {
    let input = "&#9;foo";
    let expected = "<p>\\tfoo</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_41() {
    let input = "[a](url &quot;tit&quot;)";
    let expected = "<p>[a](url &quot;tit&quot;)</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        parser.parse();
        let ast = parser.finish().to_document();
        let mut buffer = String::new();
        commonmark_html::format_document(&mut buffer, &ast)
            .expect("Failed to format the parsed input");
        buffer
    }
}
#[ignore]
#[test]
fn example_148() {
    let input = "<table><tr><td>\\n<pre>\\n**Hello**,\\n\\n_world_.\\n</pre>\\n</td></tr></table>";
    let expected = "<table><tr><td>\\n<pre>\\n**Hello**,\\n<p><em>world</em>.\\n</pre></p>\\n</td></tr></table>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_149() {
    let input =
        "<table>\\n  <tr>\\n    <td>\\n           hi\\n    </td>\\n  </tr>\\n</table>\\n\\nokay.";
    let expected = "<table>\\n  <tr>\\n    <td>\\n           hi\\n    </td>\\n  </tr>\\n</table>\\n<p>okay.</p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_150() {
    let input = " <div>\\n  *hello*\\n         <foo><a>";
    let expected = " <div>\\n  *hello*\\n         <foo><a>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_151() {
    let input = "</div>\\n*foo*";
    let expected = "</div>\\n*foo*";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_152() {
    let input = "<DIV CLASS=\\\"foo\\\">\\n\\n*Markdown*\\n\\n</DIV>";
    let expected = "<DIV CLASS=\\\"foo\\\">\\n<p><em>Markdown</em></p>\\n</DIV>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_153() {
    let input = "<div id=\\\"foo\\\"\\n  class=\\\"bar\\\">\\n</div>";
    let expected = "<div id=\\\"foo\\\"\\n  class=\\\"bar\\\">\\n</div>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_154() {
    let input = "<div id=\\\"foo\\\" class=\\\"bar\\n  baz\\\">\\n</div>";
    let expected = "<div id=\\\"foo\\\" class=\\\"bar\\n  baz\\\">\\n</div>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_155() {
    let input = "<div>\\n*foo*\\n\\n*bar*";
    let expected = "<div>\\n*foo*\\n<p><em>bar</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_156() {
    let input = "<div id=\\\"foo\\\"\\n*hi*";
    let expected = "<div id=\\\"foo\\\"\\n*hi*";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_157() {
    let input = "<div class\\nfoo";
    let expected = "<div class\\nfoo";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_158() {
    let input = "<div *???-&&&-<---\\n*foo*";
    let expected = "<div *???-&&&-<---\\n*foo*";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_159() {
    let input = "<div><a href=\\\"bar\\\">*foo*</a></div>";
    let expected = "<div><a href=\\\"bar\\\">*foo*</a></div>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_160() {
    let input = "<table><tr><td>\\nfoo\\n</td></tr></table>";
    let expected = "<table><tr><td>\\nfoo\\n</td></tr></table>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_161() {
    let input = "<div></div>\\n``` c\\nint x = 33;\\n```";
    let expected = "<div></div>\\n``` c\\nint x = 33;\\n```";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_162() {
    let input = "<a href=\\\"foo\\\">\\n*bar*\\n</a>";
    let expected = "<a href=\\\"foo\\\">\\n*bar*\\n</a>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_163() {
    let input = "<Warning>\\n*bar*\\n</Warning>";
    let expected = "<Warning>\\n*bar*\\n</Warning>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_164() {
    let input = "<i class=\\\"foo\\\">\\n*bar*\\n</i>";
    let expected = "<i class=\\\"foo\\\">\\n*bar*\\n</i>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_165() {
    let input = "</ins>\\n*bar*";
    let expected = "</ins>\\n*bar*";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_166() {
    let input = "<del>\\n*foo*\\n</del>";
    let expected = "<del>\\n*foo*\\n</del>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_167() {
    let input = "<del>\\n\\n*foo*\\n\\n</del>";
    let expected = "<del>\\n<p><em>foo</em></p>\\n</del>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_168() {
    let input = "<del>*foo*</del>";
    let expected = "<p><del><em>foo</em></del></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_169() {
    let input = "<pre language=\\\"haskell\\\"><code>\\nimport Text.HTML.TagSoup\\n\\nmain :: IO ()\\nmain = print $ parseTags tags\\n</code></pre>\\nokay" ;
    let expected = "<pre language=\\\"haskell\\\"><code>\\nimport Text.HTML.TagSoup\\n\\nmain :: IO ()\\nmain = print $ parseTags tags\\n</code></pre>\\n<p>okay</p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_170() {
    let input = "<script type=\\\"text/javascript\\\">\\n// JavaScript example\\n\\ndocument.getElementById(\\\"demo\\\").innerHTML = \\\"Hello JavaScript!\\\";\\n</script>\\nokay" ;
    let expected = "<script type=\\\"text/javascript\\\">\\n// JavaScript example\\n\\ndocument.getElementById(\\\"demo\\\").innerHTML = \\\"Hello JavaScript!\\\";\\n</script>\\n<p>okay</p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_171() {
    let input = "<textarea>\\n\\n*foo*\\n\\n_bar_\\n\\n</textarea>";
    let expected = "<textarea>\\n\\n*foo*\\n\\n_bar_\\n\\n</textarea>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_172() {
    let input = "<style\\n  type=\\\"text/css\\\">\\nh1 {color:red;}\\n\\np {color:blue;}\\n</style>\\nokay" ;
    let expected = "<style\\n  type=\\\"text/css\\\">\\nh1 {color:red;}\\n\\np {color:blue;}\\n</style>\\n<p>okay</p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_173() {
    let input = "<style\\n  type=\\\"text/css\\\">\\n\\nfoo";
    let expected = "<style\\n  type=\\\"text/css\\\">\\n\\nfoo";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_174() {
    let input = "> <div>\\n> foo\\n\\nbar";
    let expected = "<blockquote>\\n<div>\\nfoo\\n</blockquote>\\n<p>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_175() {
    let input = "- <div>\\n- foo";
    let expected = "<ul>\\n<li>\\n<div>\\n</li>\\n<li>foo</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_176() {
    let input = "<style>p{color:red;}</style>\\n*foo*";
    let expected = "<style>p{color:red;}</style>\\n<p><em>foo</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_177() {
    let input = "<!-- foo -->*bar*\\n*baz*";
    let expected = "<!-- foo -->*bar*\\n<p><em>baz</em></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_178() {
    let input = "<script>\\nfoo\\n</script>1. *bar*";
    let expected = "<script>\\nfoo\\n</script>1. *bar*";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_179() {
    let input = "<!-- Foo\\n\\nbar\\n   baz -->\\nokay";
    let expected = "<!-- Foo\\n\\nbar\\n   baz -->\\n<p>okay</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_180() {
    let input = "<?php\\n\\n  echo \\'>\\';\\n\\n?>\\nokay";
    let expected = "<?php\\n\\n  echo \\'>\\';\\n\\n?>\\n<p>okay</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_181() {
    let input = "<!DOCTYPE html>";
    let expected = "<!DOCTYPE html>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_182() {
    let input = "<![CDATA[\\nfunction matchwo(a,b)\\n{\\n  if (a < b && a < 0) then {\\n    return 1;\\n\\n  } else {\\n\\n    return 0;\\n  }\\n}\\n]]>\\nokay" ;
    let expected = "<![CDATA[\\nfunction matchwo(a,b)\\n{\\n  if (a < b && a < 0) then {\\n    return 1;\\n\\n  } else {\\n\\n    return 0;\\n  }\\n}\\n]]>\\n<p>okay</p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_183() {
    let input = "  <!-- foo -->\\n\\n    <!-- foo -->";
    let expected = "  <!-- foo -->\\n<pre><code>&lt;!-- foo --&gt;\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_184() {
    let input = "  <div>\\n\\n    <div>";
    let expected = "  <div>\\n<pre><code>&lt;div&gt;\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_185() {
    let input = "Foo\\n<div>\\nbar\\n</div>";
    let expected = "<p>Foo</p>\\n<div>\\nbar\\n</div>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_186() {
    let input = "<div>\\nbar\\n</div>\\n*foo*";
    let expected = "<div>\\nbar\\n</div>\\n*foo*";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_187() {
    let input = "Foo\\n<a href=\\\"bar\\\">\\nbaz";
    let expected = "<p>Foo\\n<a href=\\\"bar\\\">\\nbaz</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_188() {
    let input = "<div>\\n\\n*Emphasized* text.\\n\\n</div>";
    let expected = "<div>\\n<p><em>Emphasized</em> text.</p>\\n</div>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_189() {
    let input = "<div>\\n*Emphasized* text.\\n</div>";
    let expected = "<div>\\n*Emphasized* text.\\n</div>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_190() {
    let input = "<table>\\n\\n<tr>\\n\\n<td>\\nHi\\n</td>\\n\\n</tr>\\n\\n</table>";
    let expected = "<table>\\n<tr>\\n<td>\\nHi\\n</td>\\n</tr>\\n</table>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_191() {
    let input =
        "<table>\\n\\n  <tr>\\n\\n    <td>\\n      Hi\\n    </td>\\n\\n  </tr>\\n\\n</table>";
    let expected = "<table>\\n  <tr>\\n<pre><code>&lt;td&gt;\\n  Hi\\n&lt;/td&gt;\\n</code></pre>\\n  </tr>\\n</table>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

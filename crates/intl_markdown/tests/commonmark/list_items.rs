#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
mod harness {
    use intl_markdown::{commonmark_html, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        parser.parse();
        let ast = parser.finish().to_document();
        let mut buffer = String::new();
        commonmark_html::format_document(&mut buffer, &ast)
            .expect("Failed to format the parsed input");
        buffer
    }
}
#[ignore]
#[test]
fn example_253() {
    let input = "A paragraph\\nwith two lines.\\n\\n    indented code\\n\\n> A block quote.";
    let expected = "<p>A paragraph\\nwith two lines.</p>\\n<pre><code>indented code\\n</code></pre>\\n<blockquote>\\n<p>A block quote.</p>\\n</blockquote>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_254() {
    let input = "1.  A paragraph\\n    with two lines.\\n\\n        indented code\\n\\n    > A block quote." ;
    let expected = "<ol>\\n<li>\\n<p>A paragraph\\nwith two lines.</p>\\n<pre><code>indented code\\n</code></pre>\\n<blockquote>\\n<p>A block quote.</p>\\n</blockquote>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_255() {
    let input = "- one\\n\\n two";
    let expected = "<ul>\\n<li>one</li>\\n</ul>\\n<p>two</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_256() {
    let input = "- one\\n\\n  two";
    let expected = "<ul>\\n<li>\\n<p>one</p>\\n<p>two</p>\\n</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_257() {
    let input = " -    one\\n\\n     two";
    let expected = "<ul>\\n<li>one</li>\\n</ul>\\n<pre><code> two\\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_258() {
    let input = " -    one\\n\\n      two";
    let expected = "<ul>\\n<li>\\n<p>one</p>\\n<p>two</p>\\n</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_259() {
    let input = "   > > 1.  one\\n>>\\n>>     two";
    let expected = "<blockquote>\\n<blockquote>\\n<ol>\\n<li>\\n<p>one</p>\\n<p>two</p>\\n</li>\\n</ol>\\n</blockquote>\\n</blockquote>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_260() {
    let input = ">>- one\\n>>\\n  >  > two";
    let expected = "<blockquote>\\n<blockquote>\\n<ul>\\n<li>one</li>\\n</ul>\\n<p>two</p>\\n</blockquote>\\n</blockquote>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_261() {
    let input = "-one\\n\\n2.two";
    let expected = "<p>-one</p>\\n<p>2.two</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_262() {
    let input = "- foo\\n\\n\\n  bar";
    let expected = "<ul>\\n<li>\\n<p>foo</p>\\n<p>bar</p>\\n</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_263() {
    let input = "1.  foo\\n\\n    ```\\n    bar\\n    ```\\n\\n    baz\\n\\n    > bam";
    let expected = "<ol>\\n<li>\\n<p>foo</p>\\n<pre><code>bar\\n</code></pre>\\n<p>baz</p>\\n<blockquote>\\n<p>bam</p>\\n</blockquote>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_264() {
    let input = "- Foo\\n\\n      bar\\n\\n\\n      baz";
    let expected =
        "<ul>\\n<li>\\n<p>Foo</p>\\n<pre><code>bar\\n\\n\\nbaz\\n</code></pre>\\n</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_265() {
    let input = "123456789. ok";
    let expected = "<ol start=\\\"123456789\\\">\\n<li>ok</li>\\n</ol>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_266() {
    let input = "1234567890. not ok";
    let expected = "<p>1234567890. not ok</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_267() {
    let input = "0. ok";
    let expected = "<ol start=\\\"0\\\">\\n<li>ok</li>\\n</ol>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_268() {
    let input = "003. ok";
    let expected = "<ol start=\\\"3\\\">\\n<li>ok</li>\\n</ol>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_269() {
    let input = "-1. not ok";
    let expected = "<p>-1. not ok</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_270() {
    let input = "- foo\\n\\n      bar";
    let expected = "<ul>\\n<li>\\n<p>foo</p>\\n<pre><code>bar\\n</code></pre>\\n</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_271() {
    let input = "  10.  foo\\n\\n           bar";
    let expected = "<ol start=\\\"10\\\">\\n<li>\\n<p>foo</p>\\n<pre><code>bar\\n</code></pre>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_272() {
    let input = "    indented code\\n\\nparagraph\\n\\n    more code";
    let expected = "<pre><code>indented code\\n</code></pre>\\n<p>paragraph</p>\\n<pre><code>more code\\n</code></pre>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_273() {
    let input = "1.     indented code\\n\\n   paragraph\\n\\n       more code";
    let expected = "<ol>\\n<li>\\n<pre><code>indented code\\n</code></pre>\\n<p>paragraph</p>\\n<pre><code>more code\\n</code></pre>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_274() {
    let input = "1.      indented code\\n\\n   paragraph\\n\\n       more code";
    let expected = "<ol>\\n<li>\\n<pre><code> indented code\\n</code></pre>\\n<p>paragraph</p>\\n<pre><code>more code\\n</code></pre>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_275() {
    let input = "   foo\\n\\nbar";
    let expected = "<p>foo</p>\\n<p>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_276() {
    let input = "-    foo\\n\\n  bar";
    let expected = "<ul>\\n<li>foo</li>\\n</ul>\\n<p>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_277() {
    let input = "-  foo\\n\\n   bar";
    let expected = "<ul>\\n<li>\\n<p>foo</p>\\n<p>bar</p>\\n</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_278() {
    let input = "-\\n  foo\\n-\\n  ```\\n  bar\\n  ```\\n-\\n      baz";
    let expected = "<ul>\\n<li>foo</li>\\n<li>\\n<pre><code>bar\\n</code></pre>\\n</li>\\n<li>\\n<pre><code>baz\\n</code></pre>\\n</li>\\n</ul>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_279() {
    let input = "-   \\n  foo";
    let expected = "<ul>\\n<li>foo</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_280() {
    let input = "-\\n\\n  foo";
    let expected = "<ul>\\n<li></li>\\n</ul>\\n<p>foo</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_281() {
    let input = "- foo\\n-\\n- bar";
    let expected = "<ul>\\n<li>foo</li>\\n<li></li>\\n<li>bar</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_282() {
    let input = "- foo\\n-   \\n- bar";
    let expected = "<ul>\\n<li>foo</li>\\n<li></li>\\n<li>bar</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_283() {
    let input = "1. foo\\n2.\\n3. bar";
    let expected = "<ol>\\n<li>foo</li>\\n<li></li>\\n<li>bar</li>\\n</ol>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_284() {
    let input = "*";
    let expected = "<ul>\\n<li></li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_285() {
    let input = "foo\\n*\\n\\nfoo\\n1.";
    let expected = "<p>foo\\n*</p>\\n<p>foo\\n1.</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_286() {
    let input = " 1.  A paragraph\\n     with two lines.\\n\\n         indented code\\n\\n     > A block quote." ;
    let expected = "<ol>\\n<li>\\n<p>A paragraph\\nwith two lines.</p>\\n<pre><code>indented code\\n</code></pre>\\n<blockquote>\\n<p>A block quote.</p>\\n</blockquote>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_287() {
    let input = "  1.  A paragraph\\n      with two lines.\\n\\n          indented code\\n\\n      > A block quote." ;
    let expected = "<ol>\\n<li>\\n<p>A paragraph\\nwith two lines.</p>\\n<pre><code>indented code\\n</code></pre>\\n<blockquote>\\n<p>A block quote.</p>\\n</blockquote>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_288() {
    let input = "   1.  A paragraph\\n       with two lines.\\n\\n           indented code\\n\\n       > A block quote." ;
    let expected = "<ol>\\n<li>\\n<p>A paragraph\\nwith two lines.</p>\\n<pre><code>indented code\\n</code></pre>\\n<blockquote>\\n<p>A block quote.</p>\\n</blockquote>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_289() {
    let input = "    1.  A paragraph\\n        with two lines.\\n\\n            indented code\\n\\n        > A block quote." ;
    let expected = "<pre><code>1.  A paragraph\\n    with two lines.\\n\\n        indented code\\n\\n    &gt; A block quote.\\n</code></pre>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_290() {
    let input = "  1.  A paragraph\\nwith two lines.\\n\\n          indented code\\n\\n      > A block quote." ;
    let expected = "<ol>\\n<li>\\n<p>A paragraph\\nwith two lines.</p>\\n<pre><code>indented code\\n</code></pre>\\n<blockquote>\\n<p>A block quote.</p>\\n</blockquote>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_291() {
    let input = "  1.  A paragraph\\n    with two lines.";
    let expected = "<ol>\\n<li>A paragraph\\nwith two lines.</li>\\n</ol>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_292() {
    let input = "> 1. > Blockquote\\ncontinued here.";
    let expected = "<blockquote>\\n<ol>\\n<li>\\n<blockquote>\\n<p>Blockquote\\ncontinued here.</p>\\n</blockquote>\\n</li>\\n</ol>\\n</blockquote>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_293() {
    let input = "> 1. > Blockquote\\n> continued here.";
    let expected = "<blockquote>\\n<ol>\\n<li>\\n<blockquote>\\n<p>Blockquote\\ncontinued here.</p>\\n</blockquote>\\n</li>\\n</ol>\\n</blockquote>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_294() {
    let input = "- foo\\n  - bar\\n    - baz\\n      - boo";
    let expected = "<ul>\\n<li>foo\\n<ul>\\n<li>bar\\n<ul>\\n<li>baz\\n<ul>\\n<li>boo</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_295() {
    let input = "- foo\\n - bar\\n  - baz\\n   - boo";
    let expected = "<ul>\\n<li>foo</li>\\n<li>bar</li>\\n<li>baz</li>\\n<li>boo</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_296() {
    let input = "10) foo\\n    - bar";
    let expected = "<ol start=\\\"10\\\">\\n<li>foo\\n<ul>\\n<li>bar</li>\\n</ul>\\n</li>\\n</ol>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_297() {
    let input = "10) foo\\n   - bar";
    let expected = "<ol start=\\\"10\\\">\\n<li>foo</li>\\n</ol>\\n<ul>\\n<li>bar</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_298() {
    let input = "- - foo";
    let expected = "<ul>\\n<li>\\n<ul>\\n<li>foo</li>\\n</ul>\\n</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_299() {
    let input = "1. - 2. foo";
    let expected = "<ol>\\n<li>\\n<ul>\\n<li>\\n<ol start=\\\"2\\\">\\n<li>foo</li>\\n</ol>\\n</li>\\n</ul>\\n</li>\\n</ol>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_300() {
    let input = "- # Foo\\n- Bar\\n  ---\\n  baz";
    let expected = "<ul>\\n<li>\\n<h1>Foo</h1>\\n</li>\\n<li>\\n<h2>Bar</h2>\\nbaz</li>\\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

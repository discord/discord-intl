#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
#[cfg(test)]
mod harness {
    use intl_markdown::{formatter, ICUMarkdownParser, SourceText};
    pub fn parse(input: &str) -> String {
        let mut parser = ICUMarkdownParser::new(SourceText::from(input), true);
        #[cfg(feature = "debug-tracing")]
        println!("Blocks: {:?}\n", parser.lexer_block_bounds());
        parser.parse();
        #[cfg(feature = "debug-tracing")]
        println!("Tokens:\n-------\n{:#?}\n", parser.debug_token_list());
        let result = parser.finish();
        println!("Tree:\n-------\n{:#?}\n", result.tree);
        let ast = result.to_document();
        println!("AST:\n----\n{:#?}\n", ast);
        let output = formatter::to_html(&ast);
        println!("Input:\n------\n{}\n", input);
        println!("HTML Format:\n------------\n{}\n{:?}", output, output);
        output
    }
}
#[test]
fn example_62() {
    let input = "# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo";
    let expected =
        "<h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_63() {
    let input = "####### foo";
    let expected = "<p>####### foo</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_64() {
    let input = "#5 bolt\n\n#hashtag";
    let expected = "<p>#5 bolt</p>\n<p>#hashtag</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_65() {
    let input = "\\## foo";
    let expected = "<p>## foo</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_66() {
    let input = "# foo *bar* \\*baz\\*";
    let expected = "<h1>foo <em>bar</em> *baz*</h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_67() {
    let input = "#                  foo                     ";
    let expected = "<h1>foo</h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_68() {
    let input = " ### foo\n  ## foo\n   # foo";
    let expected = "<h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_69() {
    let input = "    # foo";
    let expected = "<pre><code># foo\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_70() {
    let input = "foo\n    # bar";
    let expected = "<p>foo\n# bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_71() {
    let input = "## foo ##\n  ###   bar    ###";
    let expected = "<h2>foo</h2>\n<h3>bar</h3>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_72() {
    let input = "# foo ##################################\n##### foo ##";
    let expected = "<h1>foo</h1>\n<h5>foo</h5>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_73() {
    let input = "### foo ###     ";
    let expected = "<h3>foo</h3>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_74() {
    let input = "### foo ### b";
    let expected = "<h3>foo ### b</h3>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_75() {
    let input = "# foo#";
    let expected = "<h1>foo#</h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_76() {
    let input = "### foo \\###\n## foo #\\##\n# foo \\#";
    let expected = "<h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_77() {
    let input = "****\n## foo\n****";
    let expected = "<hr />\n<h2>foo</h2>\n<hr />";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_78() {
    let input = "Foo bar\n# baz\nBar foo";
    let expected = "<p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_79() {
    let input = "## \n#\n### ###";
    let expected = "<h2></h2>\n<h1></h1>\n<h3></h3>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

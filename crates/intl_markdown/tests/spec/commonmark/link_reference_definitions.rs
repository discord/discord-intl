#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
use super::harness;
#[ignore]
#[test]
fn example_192() {
    let input = "[foo]: /url \"title\"\n\n[foo]";
    let expected = "<p><a href=\"/url\" title=\"title\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_193() {
    let input = "   [foo]: \n      /url  \n           'the title'  \n\n[foo]";
    let expected = "<p><a href=\"/url\" title=\"the title\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_194() {
    let input = "[Foo*bar\\]]:my_(url) 'title (with parens)'\n\n[Foo*bar\\]]";
    let expected = "<p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_195() {
    let input = "[Foo bar]:\n<my url>\n'title'\n\n[Foo bar]";
    let expected = "<p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_196() {
    let input = "[foo]: /url '\ntitle\nline1\nline2\n'\n\n[foo]";
    let expected = "<p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_197() {
    let input = "[foo]: /url 'title\n\nwith blank line'\n\n[foo]";
    let expected = "<p>[foo]: /url 'title</p>\n<p>with blank line'</p>\n<p>[foo]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_198() {
    let input = "[foo]:\n/url\n\n[foo]";
    let expected = "<p><a href=\"/url\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_199() {
    let input = "[foo]:\n\n[foo]";
    let expected = "<p>[foo]:</p>\n<p>[foo]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_200() {
    let input = "[foo]: <>\n\n[foo]";
    let expected = "<p><a href=\"\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_201() {
    let input = "[foo]: <bar>(baz)\n\n[foo]";
    let expected = "<p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_202() {
    let input = "[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]";
    let expected = "<p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_203() {
    let input = "[foo]\n\n[foo]: url";
    let expected = "<p><a href=\"url\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_204() {
    let input = "[foo]\n\n[foo]: first\n[foo]: second";
    let expected = "<p><a href=\"first\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_205() {
    let input = "[FOO]: /url\n\n[Foo]";
    let expected = "<p><a href=\"/url\">Foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_206() {
    let input = "[ΑΓΩ]: /φου\n\n[αγω]";
    let expected = "<p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_207() {
    let input = "[foo]: /url";
    let expected = "";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_208() {
    let input = "[\nfoo\n]: /url\nbar";
    let expected = "<p>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_209() {
    let input = "[foo]: /url \"title\" ok";
    let expected = "<p>[foo]: /url &quot;title&quot; ok</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_210() {
    let input = "[foo]: /url\n\"title\" ok";
    let expected = "<p>&quot;title&quot; ok</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_211() {
    let input = "    [foo]: /url \"title\"\n\n[foo]";
    let expected = "<pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_212() {
    let input = "```\n[foo]: /url\n```\n\n[foo]";
    let expected = "<pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_213() {
    let input = "Foo\n[bar]: /baz\n\n[bar]";
    let expected = "<p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_214() {
    let input = "# [Foo]\n[foo]: /url\n> bar";
    let expected = "<h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_215() {
    let input = "[foo]: /url\nbar\n===\n[foo]";
    let expected = "<h1>bar</h1>\n<p><a href=\"/url\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_216() {
    let input = "[foo]: /url\n===\n[foo]";
    let expected = "<p>===\n<a href=\"/url\">foo</a></p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_217() {
    let input = "[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]" ;
    let expected = "<p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_218() {
    let input = "[foo]\n\n> [foo]: /url";
    let expected = "<p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

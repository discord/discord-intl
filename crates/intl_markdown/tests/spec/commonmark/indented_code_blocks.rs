#![doc = r" This module is autogenerated with `cargo xtask gen-spec-tests`. The"]
#![doc = r" source for this script lives at `xtask/src/bin/gen-spec-tests.rs`."]
use super::harness;
#[test]
fn example_107() {
    let input = "    a simple\n      indented code block";
    let expected = "<pre><code>a simple\n  indented code block\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_108() {
    let input = "  - foo\n\n    bar";
    let expected = "<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_109() {
    let input = "1.  foo\n\n    - bar";
    let expected = "<ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[ignore]
#[test]
fn example_110() {
    let input = "    <a/>\n    *hi*\n\n    - one";
    let expected = "<pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_111() {
    let input = "    chunk1\n\n    chunk2\n  \n \n \n    chunk3";
    let expected = "<pre><code>chunk1\n\nchunk2\n\n\n\nchunk3\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_112() {
    let input = "    chunk1\n      \n      chunk2";
    let expected = "<pre><code>chunk1\n  \n  chunk2\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_113() {
    let input = "Foo\n    bar";
    let expected = "<p>Foo\nbar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_114() {
    let input = "    foo\nbar";
    let expected = "<pre><code>foo\n</code></pre>\n<p>bar</p>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_115() {
    let input = "# Heading\n    foo\nHeading\n------\n    foo\n----";
    let expected = "<h1>Heading</h1>\n<pre><code>foo\n</code></pre>\n<h2>Heading</h2>\n<pre><code>foo\n</code></pre>\n<hr />" ;
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_116() {
    let input = "        foo\n    bar";
    let expected = "<pre><code>    foo\nbar\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_117() {
    let input = "\n    \n    foo\n    ";
    let expected = "<pre><code>foo\n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}
#[test]
fn example_118() {
    let input = "    foo  ";
    let expected = "<pre><code>foo  \n</code></pre>";
    let parsed = harness::parse(input);
    assert_eq!(expected, parsed);
}

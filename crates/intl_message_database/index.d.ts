/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class IntlMessagesDatabase {
  constructor()
  findAllMessagesFiles(directories: Array<string>, defaultDefinitionLocale: string): Array<IntlMessagesFileDescriptor>
  filterAllMessagesFiles(files: Array<string>, defaultDefinitionLocale: string): Array<IntlMessagesFileDescriptor>
  processAllMessagesFiles(directories: Array<IntlMessagesFileDescriptor>, strategy: IntlDatabaseInsertStrategy): Array<IntlSourceFileInsertionData>
  processDefinitionsFile(filePath: string, locale: string | undefined | null, strategy: IntlDatabaseInsertStrategy): IntlSourceFileInsertionData
  processDefinitionsFileContent(filePath: string, content: string, locale: string | undefined | null, strategy: IntlDatabaseInsertStrategy): IntlSourceFileInsertionData
  processAllTranslationFiles(localeMap: Record<string, string>, strategy: IntlDatabaseInsertStrategy): Array<IntlSourceFileInsertionData>
  processTranslationFile(filePath: string, locale: string, strategy: IntlDatabaseInsertStrategy): IntlSourceFileInsertionData
  processTranslationFileContent(filePath: string, locale: string, content: string, strategy: IntlDatabaseInsertStrategy): IntlSourceFileInsertionData
  getKnownLocales(): Array<string>
  getSourceFile(filePath: string): IntlSourceFile
  getAllSourceFilePaths(): Array<string>
  /**
   * Return a map of all message keys contained in the given source file, where the key of the
   * map is the hashed name and the value is the original.
   */
  getSourceFileKeyMap(filePath: string): Record<string, string>
  getMessage(key: string): IntlMessage
  generateTypes(sourceFilePath: string, outputFilePath: string): void
  precompile(filePath: string, locale: string, outputPath: string, options?: IntlMessageBundlerOptions | undefined | null): void
  precompileToBuffer(filePath: string, locale: string, options?: IntlMessageBundlerOptions | undefined | null): Buffer
  validateMessages(): Array<IntlDiagnostic>
  exportTranslations(fileExtension?: string | undefined | null): Array<string>
  getSourceFileMessageValues(filePath: string): Record<string, IntlMessageValue | undefined>
}

export declare class Message {
  key: string
  value: string
  line: number
  col: number
}

export declare function hashMessageKey(key: string): string

export declare const enum IntlCompiledMessageFormat {
  Json = 0,
  KeylessJson = 1
}

export declare const enum IntlDatabaseInsertStrategy {
  Create = 0,
  Update = 1,
  Replace = 2
}

export interface IntlDiagnostic {
  name: string
  key: string
  file: string
  line: number
  col: number
  locale: string
  severity: string
  description: string
  help?: string
}

export interface IntlMessage {
  /** Original, plain text name of the message given in its definition. */
  key: string
  /** Hashed version of the key, used everywhere for minification and obfuscation. */
  hashedKey: string
  /** Map of all translations for this message, including the default. */
  translations: Record<string, IntlMessageValue>
  /** The source definition information for this message (locale and location). */
  sourceLocale?: string
  /** Meta information about how to handle and process this message. */
  meta: IntlMessageMeta
}

export interface IntlMessageBundlerOptions {
  format?: IntlCompiledMessageFormat
  bundleSecrets?: boolean
}

export interface IntlMessageMeta {
  description: string
  secret: boolean
  translate: boolean
}

export interface IntlMessagesFileDescriptor {
  filePath: string
  locale: string
}

export interface IntlMessageValue {
  raw: string
  parsed: object
  variables: object
  filePosition: object
}

export interface IntlSourceFile {
  type: string
  file: string
  locale?: string
  messageKeys: Array<string>
  meta: IntlSourceFileMeta
}

export interface IntlSourceFileError {
  name: string
  key?: string
  locale?: string
  file?: string
  line?: number
  col?: number
  message: string
}

export interface IntlSourceFileInsertionData {
  fileKey: string
  insertedCount: number
  removedCount: number
  errors: Array<IntlSourceFileError>
}

export interface IntlSourceFileMeta {
  description: string
  secret: boolean
  translate: boolean
  translationsPath: string
  sourceFilePath: string
}

export declare function isMessageDefinitionsFile(key: string): boolean

export declare function isMessageTranslationsFile(key: string): boolean

export declare function parseJson(text: string): Message[]

export declare function parseJsonFile(filePath: string): Message[]


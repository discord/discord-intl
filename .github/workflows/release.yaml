name: Release intl ecosystem

on:
  workflow_dispatch:
    inputs:
      publish:
        required: true
        type: boolean
        description: "Publish to NPM?"
      tag:
        required: false
        type: string
        default: 'latest'
        description: "NPM version tag"
        choices:
          - latest
          - canary
      fail-fast:
        required: false
        type: boolean
        default: true
        description: 'Fail fast?'

permissions:
  # To publish packages with provenance
  contents: write
  id-token: write

jobs:
  build-db:
    name: Build intl-message-database
    strategy:
      fail-fast: ${{inputs.fail-fast}}
      matrix:
        target:
          # Linux
          - ['ubuntu-22.04', 'linux-x64-gnu']
          - ['ubuntu-22.04', 'linux-arm64-gnu']
          - ['ubuntu-22.04', 'linux-x64-musl']
          - ['ubuntu-22.04', 'linux-arm64-musl']
          # Windows
          - ['windows-latest', 'win32-ia32-msvc']
          - ['windows-latest', 'win32-x64-msvc']
          - ['windows-latest', 'win32-arm64-msvc']
          # macOS
          - ['macos-latest', 'darwin-x64']
          - ['macos-latest', 'darwin-arm64']
    uses: ./.github/workflows/build-napi-platform-package.yaml
    with:
      package: intl-message-database
      crate: intl_message_database
      cli-name: db
      runner: ${{ matrix.target[0] }}
      target: ${{ matrix.target[1] }}
    secrets: inherit

  build-json-parser:
    name: Build intl-flat-json-parser
    strategy:
      fail-fast: ${{inputs.fail-fast}}
      matrix:
        target:
          # Linux
          - [ 'ubuntu-22.04', 'linux-x64-gnu' ]
          - [ 'ubuntu-22.04', 'linux-arm64-gnu' ]
          # Windows
          - [ 'windows-latest', 'win32-x64-msvc' ]
          - [ 'windows-latest', 'win32-arm64-msvc' ]
          # macOS
          - [ 'macos-latest', 'darwin-x64' ]
          - [ 'macos-latest', 'darwin-arm64' ]
    uses: ./.github/workflows/build-napi-platform-package.yaml
    with:
      package: intl-flat-json-parser
      crate: intl_flat_json_parser
      cli-name: json
      runner: ${{ matrix.target[0] }}
      target: ${{ matrix.target[1] }}
    secrets: inherit

  build-swc:
    name: Build @discord/swc-intl-message-transformer
    uses: ./.github/workflows/build-swc-intl-message-transformer.yaml

  lint-js:
    name: Lint JS package builds
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Build Env
        uses: ./.github/actions/setup-build-env
        with:
          native: false
          target: wasm

      - name: Check JS packages build successfully
        # Ignoring `swc` because it's `build` command invokes cargo build.
        run: |
          pnpm --filter \!"swc*" -r build

  lint-rust:
    name: Lint Rust crates
    uses: ./.github/workflows/lint-rust.yaml

  release:
    name: Release and Publish
    needs:
      - lint-js
      - lint-rust
      - build-db
      - build-json-parser
      - build-swc
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    if: inputs.publish
    steps:
      - uses: actions/checkout@v4

      - name: Setup Build Env
        uses: ./.github/actions/setup-build-env
        with:
          native: false
          target: wasm

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          path: ~/artifacts
          merge-multiple: true

      - name: Move build artifacts into packages
        run: |
          pnpm intl-cli util move-gh-artifacts ~/artifacts

      - name: Set ${{inputs.tag}} version for all packages
        if: ${{inputs.tag == 'canary'}}
        run: |
          pnpm intl-cli ecosystem version bump canary

      - name: Check package version equality
        if: ${{inputs.tag != 'canary'}}
        run: |
          pnpm intl-cli ecosystem version check

      - name: Publish all @discord/intl-message-database* packages
        run: |
          pnpm intl-cli ecosystem publish-all --provenance --access public --no-git-checks --tag ${{inputs.tag}}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
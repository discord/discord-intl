name: Setup Build Env

description: |
  Setup node and rust, install dependencies, and prepare for cross-compiling packages on the host using cargo-zigbuild.

inputs:
  target:
    description: "Platform package name that can map to a Rust target triple to install."
    required: true
    type: string
  runner:
    description: "Name of the runner image this action is running on"
    required: false
    default: 'ubuntu-latest'
    type: string
  native:
    description: "Install native dependencies. Only needed for building Rust. True by default"
    required: false
    default: true
    type: string
  js:
    description: "Install JS dependencies. True by default."
    required: false
    default: true
    type: string


outputs:
  target-triple:
    value: ${{ steps.get-target-triple.outputs.triple }}
    description: "The Rust target triple that applies for the `target` input platform package."

runs:
  using: composite
  steps:
    # Node/pnpm
    - name: Node + pnpm cache
      uses: ./.github/actions/pnpm-workspace
      if: inputs.js == 'true'
      with:
        frozen-lockfile: true
        save-if: ${{ github.ref_name == 'main' }}

    # This has to run dynamically after the repo has been cloned and pnpm has been installed.
    - name: Get target triple from package name
      id: get-target-triple
      shell: bash
      if: inputs.native == 'true'
      run: |
        TRIPLE=$(pnpm intl-cli util package-triple ${{inputs.target}});
        echo "Mapped ${{inputs.target}} to $TRIPLE"
        echo "triple=$TRIPLE" >> "$GITHUB_OUTPUT"

    # Rust toolchains
    - name: Install Rust Toolchain
      uses: ./.github/actions/rustup
      if: inputs.native == 'true'
      with:
        save-cache: ${{ github.ref_name == 'main' }}
        shared-key: build-${{ steps.get-target-triple.outputs.triple }}-${{ inputs.runner }}

    - name: Setup Rust Target
      if: inputs.native == 'true'
      shell: bash
      run: rustup target add ${{ steps.get-target-triple.outputs.triple }}

    - name: Setup Apple Silicon Compilation Flags
      if: inputs.native == 'true' && inputs.target == 'darwin-arm64' && startsWith(inputs.runner, 'macos')
      shell: bash
      run: |
        if [[ "${{ startsWith(runner.name, 'GitHub Actions') }}" == "true" ]]; then
          # Github runner
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
        fi
        export CC=$(xcrun -f clang);
        export CXX=$(xcrun -f clang++);
        SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
        export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
        
        
    # Cross-compiling support with zig and cargo-zigbuild/cargo-xwin. Only needed if the host is linux.
    - name: Install ziglang
      uses: goto-bus-stop/setup-zig@v2
      if: inputs.native == 'true' && inputs.target != 'wasm' && startsWith(inputs.runner, 'ubuntu')
      with:
        version: 0.13.0

    - name: Install cargo toolchains
      uses: taiki-e/install-action@v2
      if: inputs.native == 'true' && inputs.target != 'wasm' && startsWith(inputs.runner, 'ubuntu')
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tool: cargo-zigbuild,cargo-xwin

    - name: Print build environment setup
      shell: bash
      if: inputs.native == 'true'
      run: |
        node --version
        pnpm --version
        rustc --version --verbose